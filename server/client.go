package server

import (
	"bytes"
	"log"
	"net/http"
	"time"

	"gorm.io/gorm"

	ws "github.com/gorilla/websocket"

	"github.com/uwezo-app/chat-server/utils"
)

// ConnectedClient holds the connection info of a specific client
type ConnectedClient struct {
	gorm.Model

	UserID uint `gorm:"primaryKey"`

	Client *Client `gorm:"embedded"`

	LastSeen time.Time
}

type Chat struct {
	// broadcast|targeted
	Flag string `json:"Flag"`

	// the receiving party on a targeted Message
	RecipientID uint `json:"Recipient"`

	ConversationID uint `json:"ConversationID"`

	Message string `json:"Message"`
}

type Notification struct {
	Connected bool `json:"Connected"`
	Client    *Client
}

const (
	// Time allowed to write a message to the peer.
	writeWait = 10 * time.Second

	// Time allowed to read the next pong message from the peer.
	pongWait = 60 * time.Second

	// Send pings to peer with this period. Must be less than pongWait.
	pingPeriod = (pongWait * 9) / 10

	// Maximum message size allowed from peer.
	maxMessageSize = 512
)

var (
	newline = []byte{'\n'}
	space   = []byte{' '}
)

var upgrader = ws.Upgrader{
	ReadBufferSize:  1024,
	WriteBufferSize: 1024,
	CheckOrigin: func(r *http.Request) bool {
		return true
	},
}

// Client stands between the hub and the ws connections
type Client struct {
	ClientID uint

	Name string

	Hub *Hub

	// Websockets connection
	Conn *ws.Conn

	// Buffered channel for the outgoing messages
	Send chan []byte

	SendJSON chan interface{}

	// Notification channel
	Notify chan interface{}
}

// readPump pumps messages from the websocket connection to the hub.
//
// The application runs readPump in a per-connection goroutine. The application
// ensures that there is at most one reader on a connection by executing all
// reads from this goroutine.
func (c *Client) readPump(dbase *gorm.DB, conn *ConnectedClient) {
	defer func() {
		c.Hub.Unregister <- conn
		log.Println(c.Conn.Close())
	}()

	c.Conn.SetReadLimit(maxMessageSize)
	_ = c.Conn.SetReadDeadline(time.Now().Add(pongWait))
	c.Conn.SetPongHandler(func(string) error {
		_ = c.Conn.SetReadDeadline(time.Now().Add(pongWait))
		return nil
	})

	var chat Chat
	for {
		err := c.Conn.ReadJSON(&chat)
		if err != nil {
			// Log the error if it is not generated by the websocket
			if ws.IsUnexpectedCloseError(err, ws.CloseGoingAway, ws.CloseAbnormalClosure) {
				log.Printf("error %v\n", err)
			}
		}

		chatMessage := bytes.TrimSpace(bytes.Replace([]byte(chat.Message), newline, space, -1))
		var userConn, ok = c.Hub.Connections[chat.RecipientID]
		log.Println(chatMessage)
		if ok {
			if chat.Flag == "targeted" {
				log.Println("Sending message to hub in targeted")
				message := &Message{
					to:             userConn.Client,
					from:           c,
					message:        chatMessage,
					conversationID: chat.ConversationID,
				}
				c.Hub.Targeted <- message
			}
		}
	}
}

// writePump pumps messages from the hub to the websocket connection.
//
// A goroutine running writePump is started for each connection. The
// application ensures that there is at most one writer to a connection by
// executing all writes from this goroutine.
func (c *Client) writePump() {
	ticker := time.NewTicker(pingPeriod)
	defer func() {
		ticker.Stop()
		log.Println(c.Conn.Close())
	}()

	for {
		select {
		case message, ok := <-c.Send:
			log.Println(c.Conn.SetWriteDeadline(time.Now().Add(writeWait)))
			if !ok {
				// Connection closed by the hub
				log.Println(c.Conn.WriteMessage(ws.CloseMessage, []byte{}))
				return
			}

			w, err := c.Conn.NextWriter(ws.TextMessage)
			if err != nil {
				log.Printf("Writer error: %v\n", err)
				return
			}

			if _, err = w.Write(message); err != nil {
				log.Printf("Write %v\n", err)
				return
			}

			// Add queued chat messages to the current websocket message.
			n := len(c.Send)
			for i := 0; i < n; i++ {
				log.Println(w.Write(newline))
				log.Println(w.Write(<-c.Send))
			}

			if err := w.Close(); err != nil {
				log.Printf("Error: %v\n", err)
				return
			}

		case jsonData := <-c.SendJSON:
			if err := c.Conn.WriteJSON(jsonData); err != nil {
				log.Printf("Error: %v\n", err)
				return
			}

		case message := <-c.Notify:
			if err := c.Conn.WriteJSON(message); err != nil {
				log.Printf("Error: %v\n", err)
				return
			}

		case <-ticker.C:
			log.Println(c.Conn.SetWriteDeadline(time.Now().Add(writeWait)))
			if err := c.Conn.WriteMessage(ws.PingMessage, nil); err != nil {
				log.Printf("Error: %v\n", err)
				return
			}
		}
	}
}

// ChatHandler handles websocket requests from the peer.
func ChatHandler(hub *Hub, dbase *gorm.DB, w http.ResponseWriter, r *http.Request) {
	tokenString := r.URL.Query().Get("tokenString")
	claims, err := utils.ParseTokenWithClaims(tokenString)
	if err != nil {
		log.Printf("Token parse: %v\n", err)
		http.Error(w, "Error: "+err.Error(), http.StatusBadRequest)
		return
	}

	var conn *ws.Conn
	conn, err = upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Printf("Could upgrade the connection: %v\n", err)
		return
	}

	send, sendJSON, notify := make(chan []byte), make(chan interface{}), make(chan interface{})
	client := &Client{
		claims.UserID,
		claims.Name,
		hub,
		conn,
		send,
		sendJSON,
		notify,
	}

	userConn := &ConnectedClient{
		UserID:   claims.UserID,
		Client:   client,
		LastSeen: time.Now(),
	}
	client.Hub.Register <- userConn
	log.Printf("chat?%s", tokenString)

	// Allow collection of memory referenced by the caller by doing all work in
	// new goroutines.
	go client.writePump()
	go client.readPump(dbase, userConn)
}
