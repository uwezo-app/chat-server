package server

import (
	"bytes"
	"encoding/json"
	"gorm.io/gorm"
	"log"
	"net/http"
	"os"
	"time"

	"github.com/golang-jwt/jwt/v4"
	ws "github.com/gorilla/websocket"

	"github.com/uwezo-app/chat-server/db"
)

type Chat struct {
	// broadcast|targeted
	Flag string `json:"flag"`

	// the receiving party on a targeted Message
	RecipientID uint `json:"recipient"`

	ConversationID uint

	Message string `json:"message"`
}

const (
	// Time allowed to write a message to the peer.
	writeWait = 10 * time.Second

	// Time allowed to read the next pong message from the peer.
	pongWait = 60 * time.Second

	// Send pings to peer with this period. Must be less than pongWait.
	pingPeriod = (pongWait * 9) / 10

	// Maximum message size allowed from peer.
	maxMessageSize = 512
)

var (
	newline = []byte{'\n'}
	space   = []byte{' '}
)

var upgrader = ws.Upgrader{
	ReadBufferSize:  1024,
	WriteBufferSize: 1024,
	CheckOrigin: func(r *http.Request) bool {
		return true
	},
}

// Client stands between the hub and the ws connections
type Client struct {
	ClientID uint

	hub *Hub

	// Websockets connection
	conn *ws.Conn

	// Buffered channel for the outgoing messages
	send chan []byte

	// Notification channel
	notify chan []byte
}

// readPump pumps messages from the websocket connection to the hub.
//
// The application runs readPump in a per-connection goroutine. The application
// ensures that there is at most one reader on a connection by executing all
// reads from this goroutine.
func (c *Client) readPump(dbase *gorm.DB, conn *db.ConnectedClient) {
	defer func() {
		c.hub.unregister <- conn
		log.Println(c.conn.Close())
	}()

	c.conn.SetReadLimit(maxMessageSize)
	_ = c.conn.SetReadDeadline(time.Now().Add(pongWait))
	c.conn.SetPongHandler(func(string) error {
		_ = c.conn.SetReadDeadline(time.Now().Add(pongWait))
		return nil
	})

	var chat Chat
	for {
		err := c.conn.ReadJSON(&chat)
		if err != nil {
			// Log the error if it is not generated by the websocket
			if ws.IsUnexpectedCloseError(err, ws.CloseGoingAway, ws.CloseAbnormalClosure) {
				log.Printf("error %v\n", err)
			}
		}

		chatMessage := bytes.TrimSpace(bytes.Replace([]byte(chat.Message), newline, space, -1))
		if chat.Flag == "broadcast" {
			c.hub.broadcast <- chatMessage
		} else if chat.Flag == "targeted" {
			var userConn *db.ConnectedClient
			res := dbase.Find(&userConn, &db.ConnectedClient{UserID: chat.RecipientID})
			if res.Error == nil {
				message := &Message{
					to:      userConn.Client,
					from:    c,
					message: chatMessage,
					conversationID: chat.ConversationID,
				}
				c.hub.targeted <- message
			}
		}
	}
}

// writePump pumps messages from the hub to the websocket connection.
//
// A goroutine running writePump is started for each connection. The
// application ensures that there is at most one writer to a connection by
// executing all writes from this goroutine.
func (c *Client) writePump() {
	ticker := time.NewTicker(pingPeriod)
	defer func() {
		ticker.Stop()
		log.Println(c.conn.Close())
	}()

	for {
		select {
		case message, ok := <-c.send:
			log.Println(c.conn.SetWriteDeadline(time.Now().Add(writeWait)))
			if !ok {
				// Connection closed by the hub
				log.Println(c.conn.WriteMessage(ws.CloseMessage, []byte{}))
				return
			}

			w, err := c.conn.NextWriter(ws.TextMessage)
			if err != nil {
				log.Printf("Writer error: %v\n", err)
				return
			}

			if _, err = w.Write(message); err != nil {
				log.Printf("Write %v\n", err)
				return
			}

			// Add queued chat messages to the current websocket message.
			n := len(c.send)
			for i := 0; i < n; i++ {
				log.Println(w.Write(newline))
				log.Println(w.Write(<-c.send))
			}

			if err := w.Close(); err != nil {
				log.Printf("Error: %v\n", err)
				return
			}

		case message := <-c.notify:
			log.Println(c.conn.WriteMessage(ws.CloseTryAgainLater, message))

		case <-ticker.C:
			log.Println(c.conn.SetWriteDeadline(time.Now().Add(writeWait)))
			if err := c.conn.WriteMessage(ws.PingMessage, nil); err != nil {
				return
			}
		}
	}
}

// ChatHandler handles websocket requests from the peer.
func ChatHandler(hub *Hub, dbase *gorm.DB, w http.ResponseWriter, r *http.Request) {
	var err error
	var tk *jwt.Token
	tokenString := r.URL.Query().Get("tokenString")
	tk, err = jwt.ParseWithClaims(tokenString, &db.CustomClaims{}, func(t *jwt.Token) (interface{}, error) {
		return []byte(os.Getenv("SECRET")), nil
	})
	if err != nil {
		log.Println(err)
		return
	}

	claims, ok := tk.Claims.(*db.CustomClaims)
	if !ok || !tk.Valid {
		log.Println(err)
		w.WriteHeader(http.StatusUnauthorized)
		_ = json.NewEncoder(w).Encode("Unauthorized access")
		return
	}

	var conn *ws.Conn
	conn, err = upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Printf("Could upgrade the connection: %v\n", err)
		return
	}

	send, notify := make(chan []byte), make(chan []byte)
	client := &Client{claims.UserID, hub, conn, send, notify}
	userConn := &db.ConnectedClient{
		UserID:   claims.UserID,
		Client:   client,
		LastSeen: time.Now(),
	}
	client.hub.register <- userConn

	// Allow collection of memory referenced by the caller by doing all work in
	// new goroutines.
	go client.writePump()
	go client.readPump(dbase, userConn)
}
